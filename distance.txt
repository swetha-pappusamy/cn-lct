class Graph:
    def _init_(self, vertices):
        self.V = vertices
        self.graph = [[float('inf')] * vertices for _ in range(vertices)]

    def add_edge(self, u, v, w):
        """Adds an edge between vertices u and v with weight w."""
        self.graph[u][v] = w
        self.graph[v][u] = w

    def distance_vector_routing(self, src):
        """Implements the Distance Vector Routing algorithm."""
        dist = [float('inf')] * self.V
        dist[src] = 0

        # Relax all edges (V-1) times
        for _ in range(self.V - 1):
            for u in range(self.V):
                for v in range(self.V):
                    if self.graph[u][v] != float('inf') and dist[u] + self.graph[u][v] < dist[v]:
                        dist[v] = dist[u] + self.graph[u][v]

        # Check for negative weight cycles
        for u in range(self.V):
            for v in range(self.V):
                if self.graph[u][v] != float('inf') and dist[u] + self.graph[u][v] < dist[v]:
                    print("Graph contains negative weight cycle")
                    return

        # Print the routing table
        print(f"Distance Vector Routing Table from Node {src}:")
        for i in range(self.V):
            print(f"Distance to node {i}: {dist[i]}")
        return dist


if __name__ == "__main__":
    vertices = int(input("Enter the number of vertices: "))
    g = Graph(vertices)

    edges = int(input("Enter the number of edges: "))
    for _ in range(edges):
        u, v, w = map(int, input("Enter edge (u, v) and weight w: ").split())
        g.add_edge(u, v, w)

    source_node = int(input("Enter the source node: "))
    print("\n--- Distance Vector Routing ---")
    g.distance_vector_routing(source_node)

#     Enter the number of vertices: 5
# Enter the number of edges: 6
# Enter edge (u, v) and weight w: 0 1 2
# Enter edge (u, v) and weight w: 0 2 4
# Enter edge (u, v) and weight w: 1 2 1
# Enter edge (u, v) and weight w: 1 3 7
# Enter edge (u, v) and weight w: 2 4 3
# Enter edge (u, v) and weight w: 2 4 1
# Enter the source node: 0